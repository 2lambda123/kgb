#!/system/bin/sh
echo "KGB touchkey backlight timeout settings"
echo ""
# Includes
. /sbin/lib.sh

# Defines
BL_TIMEOUT=/sys/devices/virtual/misc/notification/bl_timeout
BL_SCRIPT=/system/etc/init.d/99bltimer
REMOUNTED=0

# Abort conditions
root_uid_check
af $BL_TIMEOUT || err_exit "Kernel does not support touchkey backlight timeout settings!"

# Functions
show_bl()
{
BL_T=$(cat $BL_TIMEOUT)
if [ $BL_T = 0 ]; then
	BL_T="0 ms (always on)"
else
BL_T="$BL_T ms"
fi
echo "Current touchkey backlight timeout: $BL_T"
}
set_bl()
{
echo $1 > $BL_TIMEOUT &&
echo "Touchkey backlight timeout set to $1 ms." || err_exit "Failed to set backlight timeout!"
}
read_check()
{
while [ 1 ]; do
	read -p "$1" i
	if [ $i -eq $i 2>/dev/null ] && [ $i -ge 0 ] && [ $i -le 2147483647 ]; then
		echo $i
		break
	fi
done
}
write_boot()
{
[ -f $1 ] && echo -n "Overwriting existing boot script at $1... " || echo -n "Installing boot script to $1... "
setprop persist.kgb.bl_timeout $BL_T &&
echo "#!/system/bin/sh
getprop persist.kgb.bl_timeout > $BL_TIMEOUT" > $1 && chown 0.0 $1 && chmod 755 $1 &&
echo "done!" || err_exit "Failed to install boot script!"
}

# Script body
if system_is_ro; then
	system_rw
	REMOUNTED=1
fi

if [ "$1" = "enable" ]; then
	show_bl
	echo ""
	echo "    Default is 0, and can be anything from"
	echo "    0 (disables timeout, always on) to"
	echo "    2147483647 (max value of signed long)"
	echo ""
	BL_T="$(read_check '    New timeout setting:	')"
	echo ""
	set_bl $BL_T
	write_boot $BL_SCRIPT
	echo ""
	show_bl
elif [ "$1" = "disable" ]; then
	show_bl
	echo ""
	echo "Setting backlight timeout back to default."
	set_bl 0
	probe_del_boot $BL_SCRIPT
	echo ""
	show_bl
elif [ "$1" = "show" ]; then
	show_bl
elif [ $1 ]; then
	echo "Unrecognized option: $1"; echo ""; show_options "bltimer"
else
	show_options "bltimer"
fi

[ "$REMOUNTED" = "1" ] && system_ro

echo "
Finished."
